**Tiêu đề:** Lập Trình Viên Dùng AI (LLMs) Khác Biệt Như Thế Nào?

Chắc hẳn bạn đã từng nghe đến việc sử dụng AI, cụ thể là các mô hình ngôn ngữ lớn (LLMs), để hỗ trợ lập trình. Nhiều người thử dùng, gõ vài dòng lệnh, rồi thất vọng thốt lên: "AI viết code lỗi tùm lum, chẳng ra hồn gì cả!". Họ mong đợi AI phải viết code hoàn hảo 100%, chạy nhanh như gió, nhưng thực tế lại phũ phàng. Nghe có vẻ quen thuộc phải không?

Nhưng bạn biết không, có một số lập trình viên lại đang "song kiếm hợp bích" với AI cực kỳ hiệu quả, đạt được những kết quả đáng kinh ngạc. Họ không "cưỡi ngựa xem hoa" mà có cách tiếp cận hoàn toàn khác. Bí quyết của họ là gì? Hãy cùng khám phá câu chuyện của một lập trình viên (xin tạm gọi là "Dev") trên Reddit, người đã chia sẻ cách anh ấy khai thác sức mạnh của LLMs theo một cách rất riêng, và đạt được những thành tựu ấn tượng.

Thay vì "cầm tay chỉ việc" cho AI, Dev đã viết code để "huấn luyện" LLMs. Anh ấy sử dụng một vòng lặp đơn giản: đưa code do LLM viết vào dự án, biên dịch và chạy thử. Nếu code chạy ngon lành, anh ấy so sánh kết quả đầu ra với mong đợi. Nếu khớp, anh ấy đo thời gian thực thi. Nếu thời gian chạy là tốt nhất, code đó sẽ trở thành "nhà vô địch" hiện tại. Sau đó, anh ấy yêu cầu LLM cải thiện code dựa trên "nhà vô địch" này. Cứ thế, code được tối ưu liên tục.

Nghe có vẻ đơn giản, nhưng để làm được điều này, Dev đã phải kết hợp nhiều kỹ thuật:

- **Tận dụng sức mạnh tính toán:** Anh ấy dùng nhiều GPU 4080 để chạy hàng triệu câu lệnh nhỏ cho các LLMs mạnh mẽ như PHI.
- **Giao tiếp hiệu quả với LLMs:** Anh ấy dùng C++ và CURL để giao tiếp với LLMs thông qua LMStudio.
- **Kiểm thử tự động:** Anh ấy dùng các bài kiểm thử (unit tests) để đánh giá code do LLM viết ra.
- **Tối ưu liên tục:** Anh ấy liên tục cải tiến code dựa trên kết quả đo đạc được.

Nhờ cách làm này, Dev đã "viết lại" các thuật toán như Raytracers, Pathfinders, 3D mesh generators,... với hiệu suất cải thiện đáng kể. Thậm chí, anh ấy còn để AI tự viết các thuật toán mới hoàn toàn chỉ bằng cách đưa ra các bài kiểm thử và chờ đợi.

**Một số mẹo hay từ Dev:**

- **Sử dụng vòng lặp:** Tự động hóa quá trình tạo, biên dịch, chạy thử và đánh giá code.
- **Tập trung vào hiệu suất:** Đặt mục tiêu tối ưu hóa tốc độ thực thi.
- **Khám phá thuật toán mới:** Dùng unit tests để "thách thức" AI viết code từ đầu.
- **Tận dụng các mô hình nhỏ, mạnh mẽ:** Các LLMs nhỏ như PHI có thể xử lý hàng triệu câu lệnh nhỏ, đặc biệt khi kết hợp với nhiều GPU.
- **Giao tiếp hiệu quả:** Sử dụng ngôn ngữ lập trình để "nói chuyện" với LLMs thay vì gõ lệnh thủ công.

**Bình luận và mở rộng:**

Câu chuyện của Dev đã thu hút rất nhiều bình luận, nhiều người tỏ ra ngạc nhiên và thán phục. Một số người dùng khác cũng chia sẻ kinh nghiệm của họ:

- **Giống như "test driven development" trên steroid:** Một người dùng nhận xét cách làm của Dev giống như phương pháp phát triển phần mềm dựa trên kiểm thử (test driven development) nhưng ở mức độ cao hơn nhiều.
- **AI cũng có thể "học":** Một người dùng khác chia sẻ rằng AI không chỉ giúp tăng tốc độ viết code mà còn giúp họ học hỏi những cách làm mới.
- **"Tiến hóa" code:** Có người ví cách làm của Dev như một thuật toán tiến hóa, liên tục cải thiện code qua từng thế hệ.
- **"Đừng sợ code AI viết":** Một người dùng khuyến khích mọi người đừng ngại để AI viết code, hãy coi nó như một "lập trình viên" cần được quản lý và hướng dẫn.
- **"Đừng hiểu code cũng chẳng sao":** Một người dùng khác cho rằng việc không hiểu code do AI viết cũng không phải là vấn đề lớn, miễn là nó chạy đúng và hiệu quả.
- **"Vũ khí bí mật" cho lập trình viên:** Một người dùng cho rằng cách làm của Dev chính là "vũ khí bí mật" giúp các lập trình viên tăng năng suất lên gấp nhiều lần.

**Kết luận:**

Câu chuyện của Dev cho thấy, thay vì coi AI như một công cụ "thần thánh" có thể thay thế con người, hãy coi nó như một "cộng sự" đắc lực. Bằng cách kết hợp sức mạnh tính toán của máy tính với trí thông minh của AI, chúng ta có thể đạt được những thành tựu vượt xa sức tưởng tượng.

Tuy nhiên, cũng cần lưu ý rằng cách làm này đòi hỏi kiến thức lập trình sâu rộng, khả năng thiết kế hệ thống và tư duy logic tốt. Không phải ai cũng có thể áp dụng ngay lập tức. Nhưng đây là một hướng đi đầy tiềm năng, đáng để chúng ta học hỏi và khám phá.

Hãy thử áp dụng cách tiếp cận này vào công việc của bạn, biết đâu bạn sẽ khám phá ra những phương pháp mới, hiệu quả hơn để giải quyết các vấn đề hóc búa. Đừng ngại thử nghiệm, đừng ngại thất bại, vì đó chính là con đường dẫn đến thành công! Và hãy nhớ, AI không phải là "kẻ thù", mà là "đồng đội" của chúng ta trên con đường chinh phục những đỉnh cao mới!


---
Source: https://reddit.com/r/singularity/comments/1hrjffy/some_programmers_use_ai_llms_quite_differently/
