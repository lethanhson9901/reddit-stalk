{
    "items": [
        {
            "title": "Ways of working for a US-based Product Team with an Indian Engineering Team: Process Challenges and Scaling Strategies",
            "author": "twerking_superfly",
            "text": "I'm looking for advice on setting up an effective collaborative process for a distributed product team. Here's my current situation:\n\n**Context:**\n- Product Management team is based in the US\n- Engineering team is primarily located in India\n- Currently working in an ad-hoc manner\n- No well-defined pods/teams\n- Onboarding multiple new engineers\n- No established backlog\n\n**Key Challenges:**\n- How do I create a scalable process from scratch?\n- What frameworks can help integrate new team members?\n- How can we improve cross-functional collaboration?\n\nI'm particularly interested in:\n- Recommended communication tools/practices\n- Onboarding strategies for new engineers\n- Ways to create structure without being overly rigid\n- Best practices for async work across time zones\n\nWould love to hear from other folks who've successfully navigated similar distributed team dynamics. What worked for you? What pitfalls should I avoid?\n\nAppreciate any insights/advice! \ud83d\ude4f\n",
            "subreddit": "agile",
            "comments": [
                {
                    "author": "RDOmega",
                    "text": "Many pitfalls ahead that you're going to have to be explicit and deliberate to avoid falling into.\n\nMost of the time, things fall apart at the start due to unrealistic expectations, poor hiring and thinking that outsourcing excuses you from caring about the skills of your team members.  These are areas where you'll have to compensate (and could possibly even reduce the appeal of outsourcing).\n\nDon't expect an arbitrarily assembled group of people regardless of where they are in the world to deliver simply because they signed on the dotted line and you happened to pay them.  Depending on the type of outsourcing arrangement you're going for, you might be facing adversity from day one.  Many outfits engage in frustrating practices that result in you paying top dollar for talent, but they'll do things like average the seniority across multiple people (be especially prejudiced towards conversations where you're told \"years of experience\") or blatantly doctor candidate resumes to match your ask.\n\nPlease understand, your success will not be predicated on *how hard you project manage*.  They will hang you with your own rope until the relationship breaks down.  This is not about building the perfect mouse trap.  Do not resort to process to predict completion. To that end, backlogs are useless, work with your product group to identify the most important work items to pursue, and focus on that.  Don't expect your process to entitle you to a scattershot approach to compensate for poor product leadership.\n\nAfter that?  Gradually structure how you present that work to your team(s) without resorting to programming by remote control.  Stick to the agile manifesto.  Read it and understand it on a spiritual level, lol.  \n(Remember, by this point you should have hand picked good devs who - despite being outsourced - you should have a healthy relationship with!)\n\nYour success or failure will be based on how serious/secure you are identifying your challenges, meeting them head on and whether you have a contractual blame-oriented mindset vs. one of empowerment.\n\nI'll pause here, I know I didn't answer all your questions, but if you're interested, feel free to press on any of them or anything I've shared.\n\n*(I am a technical architect also functioning as the final stage technical interview for our teams.  That means I get into the weeds and I don't just design from an ivory tower.  I have primary say on job copy that goes out for my business unit.  I've taken flagging teams and helped get them on a path of improvement, as well as built entirely new teams that outperform expectations with the philosophies I've shared above.)*"
                },
                {
                    "author": "redikarus99",
                    "text": "Cheap outsourcing without understanding cultural differences will be extremely expensive, but good luck."
                },
                {
                    "author": "Pyroechidna1",
                    "text": "Read [ShapeUp](https://basecamp.com/shapeup) by Ryan Singer\n\nConsult [UnFix](https://unfix.com/) for ideas about collaboration"
                },
                {
                    "author": "PhaseMatch",
                    "text": "On commination tools and practices I've found Hofstede's dimensions provides a window into some of the cultural communication challenges:   \n  \nYou can play about with here:   \n[https://www.theculturefactor.com/country-comparison-tool](https://www.theculturefactor.com/country-comparison-tool)   \n  \nHow direct or indirect a culture is matters as well, as in the old saying \"The English are too polite to be honest, and the Dutch are too honest to be polite\"  \n  \nIt can be easy to think you have a shared understanding after a call, when in fact you don't."
                },
                {
                    "author": "davearneson",
                    "text": "India is a very low-trust country. Many Indians expect everyone outside the family to lie, abuse and avoid responsibility all the time. If everyone else constantly lies, they must lie to stay in the game. They assume you know they are doing this; therefore, if they deceive you, it's your fault, or you must have wanted to be deceived. You will see these assumptions at play on Linkedin and Reddit when Indians defend the widespread lying, fraud and avoidance of responsibility in their engineering industries.\n\nUnfortunately, this means that many of the skilled engineers your company thinks it has engaged offshore are incompetent junior engineers using 1980s engineering practices and processes who will waste your time and money while delivering nothing of value.\n\nThe first thing you have to do is send your most experienced and trusted in-house engineering team leads and architects to India to Pair Program with your new engineering team so that they can determine who is competent and who is not. Then you have to reject all the engineers and testers who dont meet your standards, which will be at least 30% of them. After that, ensure your in-house engineering vets every new Indian engineer through pair programming and is rejected after 3 months if they don't meet your internal hiring standards.\n\nYour provider will try to circumvent this by telling your managers that you are racist, that they can't find anyone with the experience you need, and that the engineers will cost much more. Therefore, there will be no cost savings. Your managers may overrule you, so communicate this with them before you start.\n\nYou can also expect that your Indian partner will assign the skilled engineers you get to lead teams for other clients without telling you because that's their business model. So these people will slowly disappear, and your work will end up being done by junior people while you are also paying for senior people who aren't assigned to your work. The only way to stop that is by having a permanent engineering management presence in the Indian service provider's office or by having the engineers physically work with you in your office.\n\nIf you dont do any of this, and I think you won't, then expect the whole engagement to be a disastrous soul-sucking costly and exhausting shit show from beginning to end.\n\nIf I were you, I would get another job."
                }
            ]
        }
    ]
}